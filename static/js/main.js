// app/static/js/main.js - Fixed working version

// Global variables
let isRecording = false;
let recognition;
let currentLanguage = 'hi';
let speechSynthesis = window.speechSynthesis;
let audioContext;
let analyser;
let microphone;
let dataArray;
let canvasContext;
let recordingStartTime;
let timerInterval;
let uploadedFiles = [];
let currentAnalysis = null;

// WebSocket connection
let ws = null;
let isConnected = false;
let reconnectAttempts = 0;
let maxReconnectAttempts = 5;
// Global speech queue and state
let isSpeaking = false;
let speechQueue = [];

// Modified WebSocket message handler
ws.onmessage = async function(event) {
    try {
        const data = JSON.parse(event.data);
        console.log('üì® Received WS message:', data);

        if (data.type === 'thinking') {
            addTypingIndicator(data.content);
        }
        else if (data.type === 'response') {
            removeTypingIndicator();
            addMessage(data.content, 'assistant');

            // Add to speech queue and process
            speechQueue.push({
                text: data.content,
                lang: currentLanguage
            });
            processSpeechQueue();
        }
        else if (data.type === 'analysis_result') {
            removeTypingIndicator();
            const analysisMessage = formatAnalysisMessage(data);
            addMessage(analysisMessage, 'assistant');

            speechQueue.push({
                text: analysisMessage,
                lang: currentLanguage
            });
            processSpeechQueue();
        }
    } catch (error) {
        console.error('WS message error:', error);
    }
};

// Process speech queue sequentially
async function processSpeechQueue() {
    if (isSpeaking || speechQueue.length === 0) return;

    isSpeaking = true;
    const { text, lang } = speechQueue.shift();

    try {
        await speakText(text, lang);
    } catch (error) {
        console.error('Speech error:', error);
    } finally {
        isSpeaking = false;
        setTimeout(processSpeechQueue, 300);
    }
}

// Enhanced speakText function with proper voice selection
async function speakText(text, lang = 'hi') {
    return new Promise((resolve) => {
        if (!window.speechSynthesis) {
            console.warn('Speech synthesis not available');
            return resolve();
        }

        // Cancel any ongoing speech
        speechSynthesis.cancel();

        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = `${lang}-IN`;
        utterance.rate = 0.85;
        utterance.pitch = 1;
        utterance.volume = 1;

        // Voice selection logic
        const voices = speechSynthesis.getVoices();
        const langVoices = voices.filter(v => v.lang.startsWith(lang));

        if (langVoices.length > 0) {
            // Prefer female voice if available
            const femaleVoice = langVoices.find(v => v.name.includes('Female'));
            utterance.voice = femaleVoice || langVoices[0];
            console.log(`Using voice: ${utterance.voice.name}`);
        } else {
            console.warn('No matching voices found, using default');
        }

        utterance.onend = resolve;
        utterance.onerror = (err) => {
            console.error('Speech error:', err);
            resolve();
        };

        speechSynthesis.speak(utterance);
    });
}
function formatAnalysisMessage(data) {
    return `üìä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ:

‡§®‡§ø‡§¶‡§æ‡§®: ${data.diagnosis} (${data.confidence}% ‡§∏‡§ü‡•Ä‡§ï)
‡§≤‡§ï‡•ç‡§∑‡§£: ${data.symptoms}
‡§â‡§™‡§ö‡§æ‡§∞: ${data.treatment}

‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø:
${data.preventive_measures.map(m => `‚Ä¢ ${m}`).join('\n')}`;
}

function addMessage(text, sender) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;

    if (sender === 'assistant') {
        messageDiv.innerHTML = `
            <div class="message-content">${text.replace(/\n/g, '<br>')}</div>
            <button class="speaker-btn" onclick="speakMessage(this)">
                <svg viewBox="0 0 24 24">
                    <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                </svg>
            </button>
        `;
    } else {
        messageDiv.innerHTML = `<div class="message-content">${text.replace(/\n/g, '<br>')}</div>`;
    }

    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}
// Initialize speech synthesis when voices are loaded
function initializeVoices() {
    return new Promise((resolve) => {
        const voices = speechSynthesis.getVoices();
        if (voices.length > 0) {
            resolve(voices);
        } else {
            speechSynthesis.onvoiceschanged = () => {
                resolve(speechSynthesis.getVoices());
                speechSynthesis.onvoiceschanged = null;
            };
        }
    });
}


// Enhanced localization
const translations = {
    hi: {
        listening: '‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
        click_to_speak: '‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§¶‡§¨‡§æ‡§è‡§Ç',
        recording: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à... ‡§∏‡•ç‡§ü‡•â‡§™ ‡§¶‡§¨‡§æ‡§è‡§Ç ‡§ú‡§¨ ‡§π‡•ã ‡§ú‡§æ‡§è',
        connection_error: '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§',
        upload_success: '‡§´‡§æ‡§á‡§≤‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•Å‡§à‡§Ç',
        location_detected: '‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ',
        processing: '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
        welcome: '‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ü‡§™‡§ï‡§æ AI ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§',
        speak_clearly: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§¨‡•ã‡§≤‡•á‡§Ç',
        mic_permission: '‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç',
        no_speech: '‡§ï‡•ã‡§à ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡§æ‡§à ‡§¶‡•Ä',
        voice_error: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§™‡§π‡§ö‡§æ‡§®‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ',
        recording_stopped: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§ï‡•Ä ‡§ó‡§à',
        connected: 'AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ',
        disconnected: 'AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§°‡§ø‡§∏‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ'
    }
};

function getLocalizedText(key) {
    return translations[currentLanguage]?.[key] || translations['hi'][key];
}

// ============================================================================
// WebSocket Functions - MAIN CONNECTION
// ============================================================================

function connectWebSocket() {
    try {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/ws/chat`;

        console.log('üîå Connecting to WebSocket:', wsUrl);

        ws = new WebSocket(wsUrl);

        ws.onopen = function() {
            console.log('‚úÖ WebSocket connected');
            isConnected = true;
            reconnectAttempts = 0;
            updateConnectionStatus(true);
            showNotification(getLocalizedText('connected'), 'success');

            // Send welcome message
            addMessage('‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤, ‡§Æ‡•å‡§∏‡§Æ, ‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ ‡§î‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ üåæ', 'assistant');
        };

        ws.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                console.log('üì® Received:', data);

                if (data.type === 'thinking') {
                    addTypingIndicator(data.content);
                } else if (data.type === 'response') {
                    removeTypingIndicator();
                    addMessage(data.content, 'assistant');

                    // Auto-speak the response
                    speakText(data.content, currentLanguage);

                    // Show which agent was used
                    if (data.agent_used) {
                        console.log('ü§ñ Agent used:', data.agent_used);
                    }
                }
            } catch (error) {
                console.error('‚ùå Error parsing message:', error);
            }
        };

        ws.onerror = function(error) {
            console.error('‚ùå WebSocket error:', error);
            showNotification('‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', 'error');
        };

        ws.onclose = function(event) {
            console.log('üîå WebSocket closed:', event.code);
            isConnected = false;
            updateConnectionStatus(false);

            // Try to reconnect
            if (reconnectAttempts < maxReconnectAttempts) {
                reconnectAttempts++;
                console.log(`üîÑ Reconnecting... Attempt ${reconnectAttempts}`);
                setTimeout(connectWebSocket, 2000 * reconnectAttempts);
            } else {
                showNotification('‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ü‡•Ç‡§ü ‡§ó‡§Ø‡§æ - ‡§™‡•á‡§ú ‡§∞‡§ø‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç', 'error');
            }
        };

    } catch (error) {
        console.error('‚ùå WebSocket connection failed:', error);
        updateConnectionStatus(false);
    }
}

function sendWebSocketMessage(content, type = 'text', additionalData = {}) {
    if (ws && isConnected) {
        const message = {
            type: type,
            content: content,
            session_id: `session_${Date.now()}`,
            ...additionalData
        };

        console.log('üì§ Sending:', message);
        ws.send(JSON.stringify(message));
        return true;
    } else {
        console.log('‚ùå WebSocket not connected, using fallback');
        return false;
    }
}

function updateConnectionStatus(connected) {
    const statusElement = document.getElementById('connectionStatus');
    if (statusElement) {
        statusElement.textContent = connected ? 'üü¢ Connected' : 'üî¥ Disconnected';
        statusElement.className = connected ? 'status-connected' : 'status-disconnected';
    }
}

// ============================================================================
// UI Helper Functions
// ============================================================================

function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    if (!notification) return;

    notification.textContent = message;
    notification.className = `notification ${type} show`;

    setTimeout(() => {
        notification.classList.remove('show');
    }, 4000);
}

function addMessage(text, sender) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;

    if (sender === 'assistant') {
        messageDiv.innerHTML = `
            ${text}
            <button class="speaker-btn" onclick="speakMessage(this)">
                <svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/></svg>
            </button>
        `;
    } else {
        messageDiv.textContent = text;
    }

    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function addTypingIndicator(message = '‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...') {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;

    // Remove existing typing indicator
    removeTypingIndicator();

    const typingDiv = document.createElement('div');
    typingDiv.className = 'message assistant typing-indicator';
    typingDiv.id = 'typingIndicator';
    typingDiv.innerHTML = `
        <div class="loading"></div>
        <span style="margin-left: 0.5rem;">${message}</span>
    `;
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function removeTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// ============================================================================
// Voice Recognition Functions - FIXED
// ============================================================================

function initializeVoiceRecognition() {
    if ('webkitSpeechRecognition' in window) {
        recognition = new webkitSpeechRecognition();
    } else if ('SpeechRecognition' in window) {
        recognition = new SpeechRecognition();
    } else {
        showNotification(getLocalizedText('voice_error'), 'error');
        return false;
    }

    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.maxAlternatives = 1;
    recognition.lang = currentLanguage + '-IN';

    let finalTranscript = '';
    let silenceTimer;

    recognition.onstart = function() {
        isRecording = true;
        finalTranscript = '';
        updateVoiceButtons();
        const recordingIndicator = document.getElementById('recordingIndicator');
        if (recordingIndicator) recordingIndicator.classList.add('active');
        const voiceStatus = document.getElementById('voiceStatus');
        if (voiceStatus) voiceStatus.textContent = getLocalizedText('recording');
        console.log('üé§ Voice recording started');
    };

    recognition.onresult = function(event) {
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
                clearTimeout(silenceTimer);

                silenceTimer = setTimeout(() => {
                    if (finalTranscript.trim()) {
                        stopRecording();
                        processVoiceInput(finalTranscript.trim());
                    }
                }, 1000);
            } else {
                interimTranscript += transcript;
            }
        }

        const voiceStatus = document.getElementById('voiceStatus');
        if (interimTranscript && voiceStatus) {
            voiceStatus.textContent = '‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç: ' + interimTranscript;
        }
    };

    recognition.onerror = function(event) {
        console.error('Voice recognition error:', event.error);
        if (event.error === 'no-speech') {
            showNotification('‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡§æ‡§à ‡§¶‡§ø‡§Ø‡§æ, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç', 'warning');
        } else if (event.error === 'audio-capture') {
            showNotification('‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', 'error');
        } else {
            showNotification(getLocalizedText('voice_error'), 'error');
        }
        stopRecording();
    };

    recognition.onend = function() {
        if (isRecording && finalTranscript.trim()) {
            processVoiceInput(finalTranscript.trim());
        }
        stopRecording();
    };

    return true;
}

function processVoiceInput(text) {
    console.log('üé§ Voice input:', text);
    addMessage(text, 'user');

    // Send through WebSocket or fallback to REST
    if (!sendWebSocketMessage(text, 'voice')) {
        // Fallback to REST API
        fetch('/voice-query', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `query=${encodeURIComponent(text)}`
        })
        .then(response => response.json())
        .then(data => {
            addMessage(data.response, 'assistant');
            speakText(data.response, currentLanguage);
        })
        .catch(error => {
            console.error('Voice query error:', error);
            addMessage('‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§• ‡§π‡•Ç‡§Ç‡•§', 'assistant');
        });
    }
}

function startRecording() {
    console.log('üé§ Starting recording...');

    if (!recognition) {
        if (!initializeVoiceRecognition()) return;
    }

    try {
        // Setup audio visualization
        setupVoiceVisualizer();

        navigator.mediaDevices.getUserMedia({ audio: true, video: false })
            .then(stream => {
                if (audioContext && analyser) {
                    microphone = audioContext.createMediaStreamSource(stream);
                    microphone.connect(analyser);
                }

                recordingStartTime = new Date().getTime();
                timerInterval = setInterval(updateTimer, 1000);

                const voiceVisualizer = document.getElementById('voiceVisualizer');
                if (voiceVisualizer) voiceVisualizer.classList.add('active');
                drawVisualizer();

                recognition.lang = currentLanguage + '-IN';
                recognition.start();
            })
            .catch(err => {
                console.error('Microphone access error:', err);
                showNotification(getLocalizedText('mic_permission'), 'error');
            });
    } catch (error) {
        console.error('Failed to start recognition:', error);
        showNotification(getLocalizedText('mic_permission'), 'error');
    }
}

function stopRecording() {
    console.log('üé§ Stopping recording...');

    if (recognition && isRecording) {
        recognition.stop();
    }

    if (microphone) {
        microphone.disconnect();
    }

    clearInterval(timerInterval);
    const voiceVisualizer = document.getElementById('voiceVisualizer');
    if (voiceVisualizer) voiceVisualizer.classList.remove('active');

    isRecording = false;
    updateVoiceButtons();
    const recordingIndicator = document.getElementById('recordingIndicator');
    if (recordingIndicator) recordingIndicator.classList.remove('active');
    const voiceStatus = document.getElementById('voiceStatus');
    if (voiceStatus) voiceStatus.textContent = getLocalizedText('click_to_speak');
    showNotification(getLocalizedText('recording_stopped'), 'success');
}

// ============================================================================
// Chat Functions - FIXED
// ============================================================================

function sendMessage() {
    const input = document.getElementById('chatInput');
    if (!input) return;

    const message = input.value.trim();

    if (message) {
        console.log('üí¨ Sending text message:', message);
        addMessage(message, 'user');
        input.value = '';

        // Send through WebSocket or fallback
        if (!sendWebSocketMessage(message, 'text')) {
            // Fallback to REST API
            addTypingIndicator();

            fetch('/voice-query', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `query=${encodeURIComponent(message)}`
            })
            .then(response => response.json())
            .then(data => {
                removeTypingIndicator();
                addMessage(data.response, 'assistant');
                speakText(data.response, currentLanguage);
            })
            .catch(error => {
                removeTypingIndicator();
                console.error('Message send error:', error);
                addMessage('‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§• ‡§π‡•Ç‡§Ç‡•§', 'assistant');
            });
        }
    }
}

// ============================================================================
// File Upload Functions - FIXED
// ============================================================================

function handleFileUpload(event) {
    const files = Array.from(event.target.files);
    console.log('üìÅ Files selected:', files.length);

    files.forEach(file => {
        if (file.type.startsWith('image/') || file.type.startsWith('video/')) {
            uploadedFiles.push(file);
            addFilePreview(file);
        }
    });

    if (files.length > 0) {
        const uploadPreviewGrid = document.getElementById('uploadPreviewGrid');
        if (uploadPreviewGrid) uploadPreviewGrid.style.display = 'grid';
        showNotification(`${files.length} ‡§´‡§æ‡§á‡§≤(‡•á‡§Ç) ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à‡§Ç`, 'success');

        // Analyze uploaded files
        setTimeout(() => {
            analyzeUploadedFiles();
        }, 1500);
    }
}

function analyzeUploadedFiles() {
    if (uploadedFiles.length === 0) return;

    console.log('üîç Analyzing files...');

    // Try WebSocket first, then fallback to REST
    if (isConnected && uploadedFiles.length > 0) {
        const file = uploadedFiles[0]; // Process first file
        const reader = new FileReader();

        reader.onload = function(e) {
            const imageData = e.target.result;

            addMessage('üì∏ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...', 'user');

            sendWebSocketMessage(
                '‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç',
                'image',
                { image_data: imageData }
            );
        };

        reader.readAsDataURL(file);
    } else {
        // Fallback to REST API
        const formData = new FormData();
        uploadedFiles.forEach(file => {
            formData.append('files', file);
        });

        fetch('/upload-image', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                displayAnalysisResults(data.analyses);
            } else {
                showNotification('‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', 'error');
            }
        })
        .catch(error => {
            console.error('Upload error:', error);
            showNotification('‡§Ö‡§™‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', 'error');
        });
    }
}

function displayAnalysisResults(analyses) {
    const analysisResults = document.getElementById('analysisResults');
    const analysisContent = document.getElementById('analysisContent');
    const downloadButton = document.getElementById('downloadPrescription');

    if (!analysisResults || !analysisContent) return;

    let content = '';
    analyses.forEach((analysis, index) => {
        currentAnalysis = analysis;
        content += `
            <div class="analysis-item">
                <h4>üì∏ ‡§´‡§æ‡§á‡§≤ ${index + 1} ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:</h4>
                <p><strong>üîç ‡§®‡§ø‡§¶‡§æ‡§®:</strong> ${analysis.disease_name}</p>
                <p><strong>üìä ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ:</strong> ${analysis.confidence}%</p>
                <p><strong>üìù ‡§µ‡§ø‡§µ‡§∞‡§£:</strong> ${analysis.description}</p>
                <p><strong>üíä ‡§â‡§™‡§ö‡§æ‡§∞:</strong> ${analysis.treatment}</p>
                ${analysis.preventive_measures ? `
                    <div class="preventive-measures">
                        <strong>üõ°Ô∏è ‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø:</strong>
                        <ul>
                            ${analysis.preventive_measures.map(measure => `<li>${measure}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
            </div>
        `;
    });

    analysisContent.innerHTML = content;
    analysisResults.style.display = 'block';
    if (downloadButton) downloadButton.style.display = 'block';

    // Add to chat
    const analysisMessage = `üì∏ ${uploadedFiles.length} ‡§´‡§æ‡§á‡§≤(‡•ã‡§Ç) ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•Ç‡§∞‡§æ:\n\n${analyses[0].disease_name} ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à (${analyses[0].confidence}% ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ)\n\n‡§â‡§™‡§ö‡§æ‡§∞: ${analyses[0].treatment}`;
    addMessage(analysisMessage, 'assistant');
    speakText(`‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ${analyses[0].disease_name} ‡§π‡•à‡•§ ${analyses[0].treatment}`, currentLanguage);
}

// ============================================================================
// Quick Actions - FIXED
// ============================================================================

function quickQuery(topic) {
    const queries = {
        weather: "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à? ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç‡•§",
        fertilizer: "‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ñ‡§æ‡§¶ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•ã‡§ó‡•Ä?",
        irrigation: "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§¨ ‡§î‡§∞ ‡§ï‡§ø‡§§‡§®‡§æ ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?",
        schemes: "‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç?"
    };

    const query = queries[topic] || "‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§";

    console.log('‚ö° Quick query:', topic);
    addMessage(query, 'user');

    // Send through WebSocket or fallback
    if (!sendWebSocketMessage(query, 'text')) {
        // Fallback
        fetch('/voice-query', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `query=${encodeURIComponent(query)}`
        })
        .then(response => response.json())
        .then(data => {
            addMessage(data.response, 'assistant');
            speakText(data.response, currentLanguage);
        })
        .catch(error => {
            console.error('Quick query error:', error);
            addMessage('‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§• ‡§π‡•Ç‡§Ç‡•§', 'assistant');
        });
    }
}

// ============================================================================
// Voice Visualization Functions
// ============================================================================

function setupVoiceVisualizer() {
    const canvas = document.getElementById('visualizerCanvas');
    if (!canvas) return;

    try {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;

        canvasContext = canvas.getContext('2d');
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;

        dataArray = new Uint8Array(analyser.frequencyBinCount);
    } catch (error) {
        console.error('Audio context setup error:', error);
    }
}

function drawVisualizer() {
    if (!isRecording || !analyser) return;

    requestAnimationFrame(drawVisualizer);

    analyser.getByteFrequencyData(dataArray);

    const canvas = document.getElementById('visualizerCanvas');
    if (!canvas || !canvasContext) return;

    canvasContext.clearRect(0, 0, canvas.width, canvas.height);

    const barWidth = (canvas.width / analyser.frequencyBinCount) * 2.5;
    let x = 0;

    for (let i = 0; i < analyser.frequencyBinCount; i++) {
        const barHeight = (dataArray[i] / 255) * canvas.height;

        const hue = i * 360 / analyser.frequencyBinCount;
        canvasContext.fillStyle = `hsla(${hue}, 80%, 50%, 0.8)`;
        canvasContext.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

        x += barWidth + 1;
    }
}

function updateTimer() {
    const now = new Date().getTime();
    const elapsed = Math.floor((now - recordingStartTime) / 1000);
    const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
    const seconds = (elapsed % 60).toString().padStart(2, '0');
    const recordingTimer = document.getElementById('recordingTimer');
    if (recordingTimer) {
        recordingTimer.textContent = `${minutes}:${seconds}`;
    }
}

function updateVoiceButtons() {
    const startButton = document.getElementById('startButton');
    const stopButton = document.getElementById('stopButton');

    if (startButton && stopButton) {
        if (isRecording) {
            startButton.disabled = true;
            startButton.style.opacity = '0.5';
            stopButton.disabled = false;
            stopButton.style.opacity = '1';
        } else {
            startButton.disabled = false;
            startButton.style.opacity = '1';
            stopButton.disabled = true;
            stopButton.style.opacity = '0.5';
        }
    }
}

// ============================================================================
// Text-to-Speech Functions
// ============================================================================

function speakText(text, lang = 'hi') {
    if (speechSynthesis) {
        speechSynthesis.cancel();

        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = lang + '-IN';
        utterance.rate = 0.8;
        utterance.pitch = 1;
        utterance.volume = 1;

        const voices = speechSynthesis.getVoices();
        const selectedVoice = voices.find(voice =>
            voice.lang.includes(lang) || voice.lang.includes('hi')
        );
        if (selectedVoice) {
            utterance.voice = selectedVoice;
        }

        speechSynthesis.speak(utterance);
    }
}

function speakMessage(button) {
    const message = button.parentElement;
    const text = message.textContent.replace('üîä', '').trim();
    speakText(text, currentLanguage);
}

// ============================================================================
// File Helper Functions
// ============================================================================

function addFilePreview(file) {
    const previewGrid = document.getElementById('uploadPreviewGrid');
    if (!previewGrid) return;

    const previewDiv = document.createElement('div');
    previewDiv.className = 'upload-preview';

    const reader = new FileReader();
    reader.onload = function(e) {
        if (file.type.startsWith('image/')) {
            previewDiv.innerHTML = `
                <img src="${e.target.result}" alt="Preview">
                <button class="remove-btn" onclick="removeFile('${file.name}')">√ó</button>
            `;
        } else if (file.type.startsWith('video/')) {
            previewDiv.innerHTML = `
                <video src="${e.target.result}" controls></video>
                <button class="remove-btn" onclick="removeFile('${file.name}')">√ó</button>
            `;
        }
    };
    reader.readAsDataURL(file);

    previewGrid.appendChild(previewDiv);
}

function removeFile(filename) {
    uploadedFiles = uploadedFiles.filter(file => file.name !== filename);

    const previews = document.querySelectorAll('.upload-preview');
    previews.forEach(preview => {
        const button = preview.querySelector('.remove-btn');
        if (button && button.getAttribute('onclick').includes(filename)) {
            preview.remove();
        }
    });

    const uploadPreviewGrid = document.getElementById('uploadPreviewGrid');
    if (uploadedFiles.length === 0 && uploadPreviewGrid) {
        uploadPreviewGrid.style.display = 'none';
    }
}

// ============================================================================
// PDF Download Function
// ============================================================================

function downloadPrescription() {
    if (!currentAnalysis) {
        showNotification('‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç', 'error');
        return;
    }

    fetch('/generate-prescription', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(currentAnalysis)
    })
    .then(response => {
        if (response.ok) {
            return response.blob();
        }
        throw new Error('Prescription generation failed');
    })
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `prescription_${new Date().getTime()}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        showNotification('‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ', 'success');
    })
    .catch(error => {
        console.error('Download error:', error);
        showNotification('‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', 'error');
    });
}

// ============================================================================
// Drag and Drop Setup
// ============================================================================

function setupDragDrop() {
    const uploadArea = document.getElementById('uploadArea');
    if (!uploadArea) return;

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            const fileInput = document.getElementById('fileInput');
            if (fileInput) {
                fileInput.files = files;
                handleFileUpload({ target: { files: files } });
            }
        }
    });
}

// ============================================================================
// Initialization - MAIN ENTRY POINT
// ============================================================================

function initializeApp() {
    console.log('üöÄ Initializing FarmBot App...');

    console.log('üöÄ Initializing app...');

    // Initialize voices first
    await initializeVoices();
    console.log('üîä Voices loaded');

    // Then connect WebSocket
    connectWebSocket();

    // Initialize voice recognition
    initializeVoiceRecognition();

    // Setup drag and drop
    setupDragDrop();

    // Update UI
    updateVoiceButtons();

    // Show welcome message
    setTimeout(() => {
        showNotification(getLocalizedText('welcome'), 'success');
    }, 1000);

    console.log('‚úÖ FarmBot App initialized');
}

// ============================================================================
// Event Listeners
// ============================================================================

document.addEventListener('DOMContentLoaded', function() {
    initializeApp();

    // Language selector
    const languageSelect = document.getElementById('languageSelect');
    if (languageSelect) {
        languageSelect.addEventListener('change', (e) => {
            currentLanguage = e.target.value;
            if (recognition) {
                recognition.lang = currentLanguage + '-IN';
            }
            showNotification(`‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§ó‡§à: ${e.target.options[e.target.selectedIndex].text}`, 'success');
        });
    }

    // Chat input
    const chatInput = document.getElementById('chatInput');
    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }

    // Initialize speech synthesis voices
    speechSynthesis.onvoiceschanged = () => {
        console.log('üîä Speech voices loaded');
    };

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.key === ' ') {
            e.preventDefault();
            if (isRecording) {
                stopRecording();
            } else {
                startRecording();
            }
        }
    });
});

// Handle page visibility changes
document.addEventListener('visibilitychange', function() {
    if (!document.hidden && !isConnected) {
        console.log('üîÑ Page visible, reconnecting...');
        connectWebSocket();
    }
});

// Handle window beforeunload
window.addEventListener('beforeunload', function() {
    if (ws) {
        ws.close();
    }
});

// Handle file upload from chat window
function handleChatFileUpload(event) {
    const files = Array.from(event.target.files);
    if (files.length === 0) return;

    // Add to main upload list
    files.forEach(file => {
        if (file.type.startsWith('image/') || file.type.startsWith('video/')) {
            uploadedFiles.push(file);
        }
    });

    // Show in chat
    addMessage(`üìÅ ${files.length} ‡§´‡§æ‡§á‡§≤(‡•á‡§Ç) ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à‡§Ç`, 'user');

    // Analyze files
    setTimeout(() => {
        analyzeUploadedFiles();
    }, 500);

    // Clear the input
    event.target.value = '';
}

// Modify the analyzeUploadedFiles function to show results in chat
function analyzeUploadedFiles() {
    if (uploadedFiles.length === 0) return;

    console.log('üîç Analyzing files...');
    addTypingIndicator('‡§´‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...');

    // Try WebSocket first, then fallback to REST
    if (isConnected && uploadedFiles.length > 0) {
        const file = uploadedFiles[0]; // Process first file
        const reader = new FileReader();

        reader.onload = function(e) {
            const imageData = e.target.result;
            sendWebSocketMessage(
                '‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç',
                'image',
                { image_data: imageData }
            );
        };
        reader.readAsDataURL(file);
    } else {
        // Fallback to REST API
        const formData = new FormData();
        uploadedFiles.forEach(file => {
            formData.append('files', file);
        });

        fetch('/upload-image', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            removeTypingIndicator();
            if (data.status === 'success') {
                displayAnalysisResults(data.analyses);
            } else {
                addMessage('‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à', 'assistant');
            }
        })
        .catch(error => {
            removeTypingIndicator();
            console.error('Upload error:', error);
            addMessage('‡§Ö‡§™‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à', 'assistant');
        });
    }
}

// Update displayAnalysisResults to show in chat
function displayAnalysisResults(analyses) {
    const analysisResults = document.getElementById('analysisResults');
    const analysisContent = document.getElementById('analysisContent');
    const downloadButton = document.getElementById('downloadPrescription');

    if (!analysisResults || !analysisContent) return;

    let content = '';
    analyses.forEach((analysis, index) => {
        currentAnalysis = analysis;
        content += `
            <div class="analysis-item">
                <h4>üì∏ ‡§´‡§æ‡§á‡§≤ ${index + 1} ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:</h4>
                <p><strong>üîç ‡§®‡§ø‡§¶‡§æ‡§®:</strong> ${analysis.disease_name}</p>
                <p><strong>üìä ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ:</strong> ${analysis.confidence}%</p>
                <p><strong>üìù ‡§µ‡§ø‡§µ‡§∞‡§£:</strong> ${analysis.description}</p>
                <p><strong>üíä ‡§â‡§™‡§ö‡§æ‡§∞:</strong> ${analysis.treatment}</p>
                ${analysis.preventive_measures ? `
                    <div class="preventive-measures">
                        <strong>üõ°Ô∏è ‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø:</strong>
                        <ul>
                            ${analysis.preventive_measures.map(measure => `<li>${measure}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
            </div>
        `;
    });

    analysisContent.innerHTML = content;
    analysisResults.style.display = 'block';
    if (downloadButton) downloadButton.style.display = 'block';

    // Add to chat
    const analysisMessage = `üì∏ ${uploadedFiles.length} ‡§´‡§æ‡§á‡§≤(‡•ã‡§Ç) ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•Ç‡§∞‡§æ:\n\n${analyses[0].disease_name} ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à (${analyses[0].confidence}% ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ)\n\n‡§â‡§™‡§ö‡§æ‡§∞: ${analyses[0].treatment}`;
    addMessage(analysisMessage, 'assistant');
    speakText(`‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ${analyses[0].disease_name} ‡§π‡•à‡•§ ${analyses[0].treatment}`, currentLanguage);

    // Show download button in chat
    const chatDownloadBtn = document.createElement('button');
    chatDownloadBtn.className = 'btn-primary';
    chatDownloadBtn.innerHTML = 'üìÑ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç';
    chatDownloadBtn.onclick = downloadPrescription;

    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant';
    messageDiv.appendChild(chatDownloadBtn);

    const chatMessages = document.getElementById('chatMessages');
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}
// Initialize ticker animation
function initMandiTicker() {
    const ticker = document.getElementById('mandiTicker');
    if (!ticker) return;

    // Duplicate items for seamless looping
    const items = ticker.innerHTML;
    ticker.innerHTML = items + items;

    // Pause animation on hover
    ticker.addEventListener('mouseenter', () => {
        ticker.style.animationPlayState = 'paused';
    });

    ticker.addEventListener('mouseleave', () => {
        ticker.style.animationPlayState = 'running';
    });
}

// Enhanced message display function
function addMessage(text, sender, options = {}) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;

    if (sender === 'assistant') {
        let content = text;

        if (options.isAnalysis) {
            content = `
                <div class="analysis-response">
                    <div class="analysis-header">
                        <span class="diagnosis">${options.diagnosis || 'Diagnosis'}</span>
                        <span class="confidence">${options.confidence || '0'}% ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ</span>
                    </div>
                    <div class="analysis-content">
                        <p><strong>‡§≤‡§ï‡•ç‡§∑‡§£:</strong> ${options.symptoms || 'N/A'}</p>
                        <p><strong>‡§â‡§™‡§ö‡§æ‡§∞:</strong> ${options.treatment || 'N/A'}</p>
                        ${options.preventiveMeasures ? `
                            <div class="preventive-measures">
                                <strong>‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø:</strong>
                                <ul>
                                    ${options.preventiveMeasures.map(m => `<li>${m}</li>`).join('')}
                                </ul>
                            </div>
                        ` : ''}
                    </div>
                    <button class="download-prescription" onclick="generatePrescription(${JSON.stringify(options)})">
                        üìÑ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
                    </button>
                </div>
            `;
        }

        messageDiv.innerHTML = `
            ${content}
            <button class="speaker-btn" onclick="speakMessage(this)">
                <svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/></svg>
            </button>
        `;
    } else {
        messageDiv.textContent = text;
    }

    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Generate prescription PDF
function generatePrescription(analysisData) {
    addTypingIndicator('‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...');

    const prescriptionData = {
        diagnosis: analysisData.diagnosis,
        confidence: analysisData.confidence,
        symptoms: analysisData.symptoms,
        treatment: analysisData.treatment,
        preventiveMeasures: analysisData.preventiveMeasures,
        timestamp: new Date().toLocaleString('hi-IN'),
        farmerInfo: {
            name: '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ',
            location: '‡§∏‡•ç‡§•‡§æ‡§®',
            contact: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§®‡§Ç‡§¨‡§∞'
        }
    };

    fetch('/generate-prescription', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(prescriptionData)
    })
    .then(response => {
        if (!response.ok) throw new Error('Failed to generate');
        return response.blob();
    })
    .then(blob => {
        removeTypingIndicator();
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `kisan_prescription_${Date.now()}.pdf`;
        document.body.appendChild(a);
        a.click();
        URL.revokeObjectURL(url);
        a.remove();
        showNotification('‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ', 'success');
    })
    .catch(error => {
        removeTypingIndicator();
        console.error('Prescription error:', error);
        showNotification('‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', 'error');
    });
}

// Update displayAnalysisResults to use new format
function displayAnalysisResults(analyses) {
    const analysis = analyses[0];
    currentAnalysis = analysis;

    // Show in chat
    addMessage('‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ', 'assistant', {
        isAnalysis: true,
        diagnosis: analysis.disease_name,
        confidence: analysis.confidence,
        symptoms: analysis.description,
        treatment: analysis.treatment,
        preventiveMeasures: analysis.preventive_measures
    });

    // Speak the diagnosis
    speakText(`‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ${analysis.disease_name} ‡§π‡•à‡•§ ‡§â‡§™‡§ö‡§æ‡§∞: ${analysis.treatment}`, currentLanguage);

    // Also show in analysis section (optional)
    const analysisResults = document.getElementById('analysisResults');
    if (analysisResults) {
        analysisResults.style.display = 'block';
        document.getElementById('analysisContent').innerHTML = `
            <div class="analysis-item">
                <p><strong>‡§®‡§ø‡§¶‡§æ‡§®:</strong> ${analysis.disease_name}</p>
                <p><strong>‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ:</strong> ${analysis.confidence}%</p>
                <p><strong>‡§≤‡§ï‡•ç‡§∑‡§£:</strong> ${analysis.description}</p>
                <p><strong>‡§â‡§™‡§ö‡§æ‡§∞:</strong> ${analysis.treatment}</p>
                ${analysis.preventive_measures ? `
                    <div class="preventive-measures">
                        <strong>‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø:</strong>
                        <ul>
                            ${analysis.preventive_measures.map(measure => `<li>${measure}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
            </div>
            <button class="btn-primary" onclick="generatePrescription(${JSON.stringify({
                diagnosis: analysis.disease_name,
                confidence: analysis.confidence,
                symptoms: analysis.description,
                treatment: analysis.treatment,
                preventiveMeasures: analysis.preventive_measures
            })})">
                üìÑ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
            </button>
        `;
    }
}

// Initialize everything when DOM loads
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    initMandiTicker();
    // ... rest of your existing initialization code
});

// Global functions for HTML onclick handlers
window.startRecording = startRecording;
window.stopRecording = stopRecording;
window.speakMessage = speakMessage;
window.sendMessage = sendMessage;
window.quickQuery = quickQuery;
window.handleFileUpload = handleFileUpload;
window.removeFile = removeFile;
window.downloadPrescription = downloadPrescription;
